(self.webpackChunkstatic_site_template=self.webpackChunkstatic_site_template||[]).push([[179],{2115:(t,e,r)=>{"use strict";r(4794);var n=r(3935),o=r(7294),i=r(9163),a=r(3727),c=r(5977),l=r(9427),u=1e3,f=1e3,y={xMax:29,xMin:0,yMax:29,yMin:0},s=i.ZP.line.attrs((function(t){return{x1:t.x1,x2:t.x2,y1:t.y1,y2:t.y2}})).withConfig({displayName:"Grid__Line",componentId:"hsvf45-0"})(["stroke:#999;"]),m=function(t){return o.createElement(o.Fragment,null,new Array(31).fill(!0).map((function(t,e){return o.createElement(s,{key:e,y1:e/30*u,y2:e/30*u,x1:"0%",x2:"100%"})})),new Array(31).fill(!0).map((function(t,e){return o.createElement(s,{key:e,x1:e/30*f,x2:e/30*f,y1:"0%",y2:"100%"})})))},h=i.ZP.svg.attrs({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 ".concat(u," ").concat(f)}).withConfig({displayName:"Background__Svg",componentId:"sc-1ja7kg2-0"})(["height:100%;width:100%;"]),p=function(t){return o.createElement(h,null,o.createElement(m,null),o.createElement("image",{href:t.backgroundImage,height:u,width:f}),t.children)},d=function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))};function x(t){return function(t){if(Array.isArray(t))return b(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return b(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?b(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var g=function(t,e){var r=t.x,n=t.y,o=e.xMax,i=e.xMin,a=e.yMax,c=e.yMin;return r>=i&&r<=o&&n>=c&&n<=a},v=function(t,e){return{x:t.x+e.x,y:t.y+e.y}},w=null,M=function(){var t,e,r,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.5,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(i&&w){var a=w*o+n;return w=null,a}do{t=2*Math.random()-1,e=2*Math.random()-1,r=Math.pow(t,2)+Math.pow(e,2)}while(r>=1||0==r);return r=Math.sqrt(-2*Math.log(r)/r),w=e*r,n+o*t*r},O={x:.5,y:.5},j=.01,S=function(t){return{x:t.x*u/30,y:t.y*f/30}},E=function(t){return{from:S(t.from),to:S(t.to)}},P=function(t){return S(v(t,O))},A=function(t){return{x:Math.floor(t.x/(u/30)),y:Math.floor(t.y/33.333333333333336)}},k=function(t){return{from:P(t.from),to:P(t.to)}},C=function(t){var e=t.xMin,r=t.xMax,n=t.yMin,o=t.yMax;return[{from:{x:e+j,y:n+j},to:{x:r+1-j,y:n+j}},{from:{x:e+j,y:n+j},to:{x:e+j,y:o+1-j}},{from:{x:r+1-j,y:n+j},to:{x:r+1-j,y:o+1-j}},{from:{x:e+j,y:o+1-j},to:{x:r+1-j,y:o+1-j}}]};function I(){return(I=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}).apply(this,arguments)}var _=function(t){var e=t.innerElement,r=t.width,n=void 0===r?1:r,i=t.height,a=void 0===i?1:i,c=t.x,l=t.y,u=t.children,f=function(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}(t,["innerElement","width","height","x","y","children"]),y=S({x:c,y:l}),s=y.x,m=y.y,h=S({x:a,y:n}),p=h.x,d=h.y,x="translate(".concat(s," ").concat(m,")"),b=e;return o.createElement("g",{transform:x},o.createElement(b,I({width:"".concat(d,"px"),height:"".concat(p,"px")},f),u))};function T(){return(T=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}).apply(this,arguments)}var D=i.ZP.rect.attrs((function(){return{rx:"1em",ry:"1em"}})).withConfig({displayName:"Text__Rect",componentId:"sc-162jir1-0"})([""]),N=(0,i.ZP)(D).attrs((function(t){return{fill:t.shadingColor,width:"100%",height:"100%"}})).withConfig({displayName:"Text__Shading",componentId:"sc-162jir1-1"})(["fill-opacity:",";"],(function(t){return t.shadingOpacity})),Z=(0,i.ZP)(D).attrs((function(t){return{fill:"none","stroke-width":1,stroke:t.borderColor}})).withConfig({displayName:"Text__Border",componentId:"sc-162jir1-2"})(["stroke-width:1;"]),U=i.ZP.text.attrs((function(){return{x:"50%",y:"50%"}})).withConfig({displayName:"Text__SvgText",componentId:"sc-162jir1-3"})(["dominant-baseline:middle;text-anchor:middle;"]);function $(){return($=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}).apply(this,arguments)}var B=(0,i.ZP)((function(t){var e=t.children,r=t.width,n=t.height,i=t.x,a=t.y,c=t.onClick,l=t.borderColor,u=t.shadingColor,f=t.shadingOpacity,y=function(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}(t,["children","width","height","x","y","onClick","borderColor","shadingColor","shadingOpacity"]);return o.createElement(o.Fragment,null,o.createElement(_,{y:a,x:i,width:r,height:n,innerElement:"svg",onClick:c},u?o.createElement(N,T({shadingColor:u,shadingOpacity:f},y)):null,e),l?o.createElement(_,T({y:a,x:i,width:r,height:n,innerElement:Z,borderColor:l},y)):null)})).withConfig({displayName:"Button__StyledText",componentId:"sc-1wh5wgx-0"})(["cursor:pointer;"]),F=function(t){var e=t.text,r=t.children,n=t.width,i=t.height,a=t.x,c=t.y,l=t.onClick,u=function(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}(t,["text","children","width","height","x","y","onClick"]);return o.createElement(B,$({width:n,height:i,y:c,x:a,shadingColor:"#333333",shadingOpacity:"0.3",borderColor:"black",onClick:l},u),e?o.createElement(U,null,e):o.createElement(o.Fragment,null,r))},W=function(){var t=(0,c.k6)();return o.createElement(p,{backgroundImage:l},o.createElement(F,{onClick:function(){return t.push("/controls")},x:10,y:25,width:4,height:2,text:"Controls"}),o.createElement(F,{onClick:function(){return t.push("/level1")},x:18,y:25,width:4,height:2,text:"Play Game!"}))},z=r(4675),G=r(3550),L=r(5172);function R(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var q=o.createContext(),H=function(t){var e,r,n=t.initialState,i=t.children,a=(e=(0,o.useState)(n),r=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(n=(a=c.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==c.return||c.return()}finally{if(o)throw i}}return r}}(e,r)||function(t,e){if(t){if("string"==typeof t)return R(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?R(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=a[0],l=a[1];return o.createElement(q.Provider,{value:{gameState:c,setGameState:l}},i)},V=function(){var t=(0,o.useContext)(q);return[t.gameState,t.setGameState]},J={x:0,y:-1},K={x:0,y:1},Q={x:1,y:0},X={x:-1,y:0};function Y(){return(Y=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}).apply(this,arguments)}function tt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function et(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?tt(Object(r),!0).forEach((function(e){rt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):tt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function rt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function nt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var ot=function(){var t,e,r=(t=V(),e=2,function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(n=(a=c.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==c.return||c.return()}finally{if(o)throw i}}return r}}(t,e)||function(t,e){if(t){if("string"==typeof t)return nt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?nt(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=r[0].vim,i=r[1],a=function(t){i((function(e){var r=function(t,e,r){var n,o,i,a,c,l,u,f,s,m=(n=v(t,r),o=y,i=n.x,a=n.y,c=o.xMax,l=o.xMin,u=o.yMax,f=o.yMin,{x:Math.min(Math.max(i,l),c),y:Math.min(Math.max(a,f),u)});return s=m,e.some((function(t){return g(s,t)}))?t:m}(e.vim,e.walls,t);return et(et({},e),{},{vim:r})}))};return(0,L.y)("Up, w, k",(function(){return a(J)})),(0,L.y)("Down, s, j",(function(){return a(K)})),(0,L.y)("Left, q, a, h",(function(){return a(X)})),(0,L.y)("Right, d, e, l",(function(){return a(Q)})),o.createElement(_,Y({},n,{innerElement:"svg"}),o.createElement("image",{href:G,height:"100%",width:"100%"}))},it=i.ZP.rect.attrs({}).withConfig({displayName:"Wall__WallRect",componentId:"sc-1ih1qeg-0"})(["fill:black;fill-opacity:0.4;stroke:black;"]),at=function(t){var e=t.area,r=e.xMin,n=e.xMax,i=e.yMin,a=e.yMax;return o.createElement(_,{x:r,y:i,width:n-r+1,height:a-i+1,innerElement:it})};function ct(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var lt=function(){var t,e,r=(t=V(),e=1,function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(n=(a=c.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==c.return||c.return()}finally{if(o)throw i}}return r}}(t,e)||function(t,e){if(t){if("string"==typeof t)return ct(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ct(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0].walls;return o.createElement(o.Fragment,null,r.map((function(t,e){return o.createElement(at,{key:e,area:t})})))};function ut(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var ft=(0,i.ZP)(U).withConfig({displayName:"VictoryButton__Congratulations",componentId:"sc-1ruivhg-0"})(["font-size:4em;"]),yt=function(){var t,e,r=(t=V(),e=1,function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(n=(a=c.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==c.return||c.return()}finally{if(o)throw i}}return r}}(t,e)||function(t,e){if(t){if("string"==typeof t)return ut(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ut(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],n=r.victory,i=r.vim,a=r.nextLevel,l=(0,c.k6)();return g(i,n)?o.createElement(F,{onClick:function(){return l.push(a)},x:5,y:5,width:20,height:20},o.createElement(ft,null,"Victory!")):null},st={nextLevel:"/level2",walls:[{yMin:11,yMax:27,xMin:21,xMax:21},{yMin:10,yMax:16,xMin:20,xMax:20},{yMin:24,yMax:27,xMin:20,xMax:20},{yMin:28,yMax:29,xMin:0,xMax:29},{yMin:0,yMax:2,xMin:0,xMax:29},{yMin:15,yMax:27,xMin:0,xMax:0},{yMin:14,yMax:27,xMin:29,xMax:29},{yMin:16,yMax:20,xMin:24,xMax:28},{yMin:13,yMax:24,xMin:15,xMax:16},{yMin:11,yMax:12,xMin:2,xMax:19},{yMin:10,yMax:10,xMin:12,xMax:19},{yMin:9,yMax:10,xMin:2,xMax:7},{yMin:6,yMax:8,xMin:6,xMax:7},{yMin:5,yMax:6,xMin:8,xMax:26},{yMin:7,yMax:11,xMin:25,xMax:26},{yMin:11,yMax:11,xMin:23,xMax:24},{yMin:12,yMax:12,xMin:24,xMax:25},{yMin:27,yMax:27,xMin:1,xMax:4}],victory:{yMin:13,yMax:18,xMin:17,xMax:19},vim:{x:25,y:25},mims:[{x:10,y:10}],projectiles:[]};function mt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var ht=i.ZP.rect.withConfig({displayName:"CollectMouseEvents__Rectangle",componentId:"fovnkx-0"})(["fill-opacity:0%;"]),pt=function(t){var e,r,n=(0,o.useRef)(),i=(e=(0,o.useState)(),r=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(n=(a=c.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==c.return||c.return()}finally{if(o)throw i}}return r}}(e,r)||function(t,e){if(t){if("string"==typeof t)return mt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?mt(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],c=i[1];(0,o.useEffect)((function(){return c(n.current&&n.current.createSVGPoint())}),[n]);var l=function(e){return function(r){a.x=r.clientX,a.y=r.clientY;var o=a.matrixTransform(n.current.getScreenCTM().inverse()),i=A(o),c=t[e];c&&c(i)}};return o.createElement(o.Fragment,null,o.createElement(_,{innerElement:function(){return o.createElement("svg",{ref:n,onMouseDown:l("onMouseDown"),onMouseUp:l("onMouseUp"),onClick:l("onClick")},o.createElement(ht,{width:"100%",height:"100%"}))},x:0,y:0,width:30,height:30}))},dt=r(8917);function xt(t){return function(t){if(Array.isArray(t))return Mt(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||wt(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function gt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?bt(Object(r),!0).forEach((function(e){vt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):bt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function vt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function wt(t,e){if(t){if("string"==typeof t)return Mt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Mt(t,e):void 0}}function Mt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var Ot=(0,i.F4)(["from{stroke:darkred;stroke-width:3px;}to{stroke:yellow;stroke-width:0px;}"]),jt=i.ZP.line.withConfig({displayName:"Projectiles__Beam",componentId:"mbydlr-0"})(["stroke:red;stroke-width:2px;animation:2s ",";animation-fill-mode:forwards;"],Ot),St=function(){var t,e,r=(t=V(),e=2,function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(n=(a=c.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==c.return||c.return()}finally{if(o)throw i}}return r}}(t,e)||wt(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=r[0].projectiles,i=r[1];return o.createElement(o.Fragment,null,n.map((function(t){return o.createElement(jt,{key:t.id,x1:t.from.x,y1:t.from.y,x2:t.to.x,y2:t.to.y})})),o.createElement(pt,{onMouseDown:function(t){i((function(e){var r,n=e.walls,o=function(t,e){var r=k(t),n=e.reduce((function(e,r){return[].concat(x(e),x(function(t,e){var r=k(t);return C(e).map(E).map((function(t){return n=t,i=(o=(e=r).from).x,a=o.y,l=(c=e.to).x,u=c.y,y=(f=n.from).x,s=f.y,h=(m=n.to).x,x=((l-i)*(a-s)-(u-a)*(i-y))/(((p=m.y)-s)*(l-i)-(h-y)*(u-a)),(d=((h-y)*(a-s)-(p-s)*(i-y))/((p-s)*(l-i)-(h-y)*(u-a)))>=0&&d<=1&&x>=0&&x<=1?{x:i+d*(l-i),y:a+d*(u-a)}:null;var e,n,o,i,a,c,l,u,f,y,s,m,h,p,d,x})).filter((function(t){return null!==t}))}(t,r)))}),[]).sort((function(t,e){return d(t,r.from)-d(e,r.from)}));return n.length?A(n[0]):t.to}({from:e.vim,to:t},n),a={from:P(e.vim),to:(r=o,S(v(r,{x:M(.5,.2),y:M(.5,.2)}))),id:(0,dt.x0)()};return setTimeout((function(){return t=a.id,i((function(e){return gt(gt({},e),{},{projectiles:e.projectiles.filter((function(e){return t!==e.id}))})}));var t}),2e3),gt(gt({},e),{},{projectiles:[].concat(xt(e.projectiles),[a])})}))}}))},Et=function(t){return t.score,t.incrementScore,o.createElement(p,{backgroundImage:z},o.createElement(H,{initialState:st},o.createElement(lt,null),o.createElement(St,null),o.createElement(ot,null),o.createElement(yt,null)))},Pt=r(7454),At=(0,i.ZP)(U).withConfig({displayName:"Controls__Paragraph",componentId:"l9yrre-0"})(["font-size:2em;"]),kt=(0,i.ZP)(At).withConfig({displayName:"Controls__Header",componentId:"l9yrre-1"})(["font-size:2em;text-decoration:underline;"]),Ct=function(t){t.changePage;var e=(0,c.k6)();return o.createElement(p,{backgroundImage:Pt},o.createElement(F,{onClick:function(){return e.push("/")},x:2,y:2,width:26,height:26,shadingOpacity:"0.9",shadingColor:"white"},o.createElement(kt,{transform:"translate(0 -200)"},"Movement"),o.createElement(At,{transform:"translate(0 -100)"},"WASD, QWES, HJKL and the arrow keys"),o.createElement(kt,{transform:"translate(0 100)"},"Shoot"),o.createElement(At,{transform:"translate(0 200)"},"left click")))},It=function(t){var e=t.gameState.score,r=t.changeState;return o.createElement(a.UT,null,o.createElement(c.rs,null,o.createElement(c.AW,{path:"/level1"},o.createElement(Et,{incrementScore:function(t){return r("score",e+t)}})),o.createElement(c.AW,{path:"/controls"},o.createElement(Ct,null)),o.createElement(c.AW,{path:"/"},o.createElement(W,null))))};function _t(){var t,e,r=(t=['\n  * {\n    border: 0;\n    padding: 0;\n    margin: 0;\n    font-family: "Open Sans", "Helvetica Neue", Arial, sans-serif;\n  }\n  \n  body{\n    background-color: #aaa;\n    @media (prefers-color-scheme: dark) {\n      background-color: #888;\n    }\n  }\n'],e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}})));return _t=function(){return r},r}var Tt=(0,i.vJ)(_t());function Dt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Nt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Dt(Object(r),!0).forEach((function(e){Zt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Dt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Zt(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Ut(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var $t=i.ZP.div.withConfig({displayName:"MainPage__PageContainer",componentId:"sc-2if5lv-0"})(["position:absolute;top:50%;left:50%;max-width:1000px;max-height:1000px;width:100%;height:100%;transform:translate(-50%,-50%);"]),Bt=function(){var t,e,r=(t=(0,o.useState)({score:0}),e=2,function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(n=(a=c.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==c.return||c.return()}finally{if(o)throw i}}return r}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Ut(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ut(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),n=r[0],i=r[1];return o.createElement($t,null,o.createElement(Tt,null),o.createElement(It,{gameState:n,changeState:function(t,e){i((function(r){return Nt(Nt({},r),{},Zt({},t,e))}))}}))};n.render(o.createElement(Bt,null),document.getElementById("root"))},4675:(t,e,r)=>{"use strict";t.exports=r.p+"c4ee33e31ef76369f17a.webp"},7454:(t,e,r)=>{"use strict";t.exports=r.p+"0cc6f8247c5e0d51c2a9.webp"},9427:(t,e,r)=>{"use strict";t.exports=r.p+"d57eb5fa0317d0c244fb.webp"},3550:(t,e,r)=>{"use strict";t.exports=r.p+"337a95e20939ecb91fce.webp"}},0,[[2115,666,216]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,